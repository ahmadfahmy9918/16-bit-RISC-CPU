// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/23/2022 11:39:56"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    reset_circuit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module reset_circuit_vlg_sample_tst(
	Clk,
	Reset,
	sampler_tx
);
input  Clk;
input  Reset;
output sampler_tx;

reg sample;
time current_time;
always @(Clk or Reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module reset_circuit_vlg_check_tst (
	Clr_PC,
	Enable_PD,
	sampler_rx
);
input  Clr_PC;
input  Enable_PD;
input sampler_rx;

reg  Clr_PC_expected;
reg  Enable_PD_expected;

reg  Clr_PC_prev;
reg  Enable_PD_prev;

reg  Clr_PC_expected_prev;
reg  Enable_PD_expected_prev;

reg  last_Clr_PC_exp;
reg  last_Enable_PD_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	Clr_PC_prev = Clr_PC;
	Enable_PD_prev = Enable_PD;
end

// update expected /o prevs

always @(trigger)
begin
	Clr_PC_expected_prev = Clr_PC_expected;
	Enable_PD_expected_prev = Enable_PD_expected;
end



// expected Clr_PC
initial
begin
	Clr_PC_expected = 1'bX;
end 

// expected Enable_PD
initial
begin
	Enable_PD_expected = 1'bX;
end 
// generate trigger
always @(Clr_PC_expected or Clr_PC or Enable_PD_expected or Enable_PD)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Clr_PC = %b | expected Enable_PD = %b | ",Clr_PC_expected_prev,Enable_PD_expected_prev);
	$display("| real Clr_PC = %b | real Enable_PD = %b | ",Clr_PC_prev,Enable_PD_prev);
`endif
	if (
		( Clr_PC_expected_prev !== 1'bx ) && ( Clr_PC_prev !== Clr_PC_expected_prev )
		&& ((Clr_PC_expected_prev !== last_Clr_PC_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Clr_PC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Clr_PC_expected_prev);
		$display ("     Real value = %b", Clr_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Clr_PC_exp = Clr_PC_expected_prev;
	end
	if (
		( Enable_PD_expected_prev !== 1'bx ) && ( Enable_PD_prev !== Enable_PD_expected_prev )
		&& ((Enable_PD_expected_prev !== last_Enable_PD_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Enable_PD :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Enable_PD_expected_prev);
		$display ("     Real value = %b", Enable_PD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Enable_PD_exp = Enable_PD_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#500000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module reset_circuit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clk;
reg Reset;
// wires                                               
wire Clr_PC;
wire Enable_PD;

wire sampler;                             

// assign statements (if any)                          
reset_circuit i1 (
// port map - connection between master ports and signals/registers   
	.Clk(Clk),
	.Clr_PC(Clr_PC),
	.Enable_PD(Enable_PD),
	.Reset(Reset)
);

// Clk
initial
begin
	repeat(12)
	begin
		Clk = 1'b0;
		Clk = #20000 1'b1;
		# 20000;
	end
	Clk = 1'b0;
end 

// Reset
initial
begin
	Reset = 1'b0;
	Reset = #50000 1'b1;
	Reset = #20000 1'b0;
end 

reset_circuit_vlg_sample_tst tb_sample (
	.Clk(Clk),
	.Reset(Reset),
	.sampler_tx(sampler)
);

reset_circuit_vlg_check_tst tb_out(
	.Clr_PC(Clr_PC),
	.Enable_PD(Enable_PD),
	.sampler_rx(sampler)
);
endmodule

